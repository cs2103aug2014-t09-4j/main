//@author: a0115160x



	/**
	 * origin: U:\workspace\BakaTxt\src\bakatxt\core\BakaParser.java
	 */

package bakatxt.core;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.joestelmach.natty.DateGroup;
import com.joestelmach.natty.Parser;

public class BakaParser implements BakaParserInterface {

    private static final String STRING_EMPTY = "";
    private static final String STRING_SPACE = " ";
    private static final String STRING_ADD = "@";
    private static final String STRING_DOUBLE_DASH = "--";
    private static final String STRING_COMMA = ",";
    private static final String STRING_AT = "at";
    private static final String STRING_ON = "on";
    private static final String STRING_TO = "to";
    private static final String STRING_FROM = "from";
    private static final String STRING_NOW = "now";
    private static final String STRING_DASH = "-";
    private static final String STRING_YEAR = "2014";
    private static final String STRING_YEAR_FRAG = "20";
    private static final String STRING_CANT_PARSE = "vista";
    private static final String STRING_REPLACEMENT = "\\/ista";
    private static final String STRING_TMR = "tomorrow";
    private static final String STRING_TODAY = "today";
    private static final String STRING_TONIGHT = "tonight";
    private static final String STRING_TONIGHT_TIME = "1900";

    private static final String DATE_FORMAT_DDMMYY_REGEX = "(0?[12]?[0-9]|3[01])[/-](0?[1-9]|1[012])[/-](\\d\\d)";
    private static final String DATE_FORMAT_DDMMYYYY_REGEX = "(0?[12]?[0-9]|3[01])[/-](0?[1-9]|1[012])[/-]((19|2[01])\\d\\d)";
    private static final String DATE_FORMAT_DDMM_REGEX = "(0?[12]?[0-9]|3[01])[/-](0?[1-9]|1[012])";
    private static final String DATE_FORMAT_DIVIDER_REGEX = "[/-]";
    private static final String DATE_FORMAT_STANDARD = "yyyy-MM-dd";
    private static final String TIME_FORMAT = "HHmm";
    private static final String DATE_FORMAT_SPECIAL = "EEEE, dd MMMM YYYY";
    private static final String DISABLE_NUMBER_REGEX = "\\d{3,}?";
    private static final String DISABLE_PARSING_REGEX = "(([0-2]\\d[0-5]\\d)|(\\d{1,2}))[^h]";
    private static final String DISABLE_FAKE_TIME_REGEX = "\\D\\S+\\d";
    private static final String DISABLE_FAKE_DIGIT_REGEX = "\\d{1,2}?";

    private static boolean _isDate;
    private static boolean _isTime;
    private static boolean _isVenue;
    private static boolean _isDescription;
    private static boolean _isExceptionString;
    private static String _title;
    private static String _date;
    private static String _time;
    private static String _endTime;
    private static String _venue;
    private static String _description;
    private static String _inputDate;
    private static String _inputTime;
    private static String _inputDateThatCantParse;
    private static ArrayList<String> _inputThatCantParse;

    public BakaParser() {
        resetDetails();
    }


    /**
     * Takes in a String and parse it. First, the description will be
     * identified, followed by the date, time, venue and title.
     * 
     * @param str
     *            is the <code>String</code> containing the command and details
     *            to be parsed
     * @return task containing the parsed information
     */
    @Override
    public Task add(String str) {
        resetDetails();
        String firstWord = getFirstWord(str);
        if (firstWord.toLowerCase().equals("add")) {
            str = str.replaceFirst(firstWord, STRING_EMPTY).trim();
        }

        if (str.contains(STRING_DOUBLE_DASH)) {
            str = str.replace(STRING_DOUBLE_DASH + STRING_SPACE,
                    STRING_DOUBLE_DASH);
            identifyDescription(str);
            str = replaceDescription(str);
        }

        if (str.contains(STRING_CANT_PARSE)) {
            str = str.replaceAll(STRING_CANT_PARSE, STRING_REPLACEMENT);
            _isExceptionString = true;
        }

        if (str.contains(STRING_ADD)) {
            str = str.replace(STRING_ADD + STRING_SPACE, STRING_ADD);
        }

        identifyDate(str);
        if (_date != null) {
            _isDate = true;
        }

        identifyTime(str);
        if (_time != null) {
            checkWithCurrentTime(_time);
            if (_time != null) {
                _isTime = true;
            }
        }
        
        if (_isExceptionString) {
            str = str.replaceAll(STRING_REPLACEMENT, STRING_CANT_PARSE);
        }

        if (str.contains(STRING_ADD)) {
            identifyVenue(str);
        }
       
        identifyTitle(str);

        Task task = new Task(_title);
        task.setDate(_date);
        if (_time != null) {
            String[] part = _time.split(STRING_DASH);
            _time = part[0].trim();
            if (part.length > 1) {
                _endTime = part[1].trim();
            }
        }
        task.setTime(_time);
        task.setEndTime(_endTime);
        task.setVenue(_venue);
        task.setDescription(_description);
        if (!_isDate && !_isTime) {
            task.setFloating(true);
        }

        return task;
    }

    /**
     * 
     * @param input
     *            is the <code>String</code> containing the command and details
     *            to be parsed
     * @return a <code>String</code> of the command or first word
     */
    private static String getFirstWord(String input) {
        String[] part = input.split(STRING_SPACE);
        return part[0].trim();
    }

    /**
     * Set all the global variables to <code>null</code>
     */
    private static void resetDetails() {
        _date = null;
        _time = null;
        _endTime = null;
        _venue = null;
        _description = null;
        _inputThatCantParse = new ArrayList<String>();
    }

    /**
     * 
     * @param input
     *            is a <code>String</code> of details to be parsed
     * @return a <code>String</code> of details without the date and time
     */
    private static String replaceDateTimeDescription(String input) {

        if (_isDate) {
            input = input.replace(_inputDate, STRING_SPACE);
            if (_inputDateThatCantParse != null) {
                input = input.replace(_inputDateThatCantParse, STRING_SPACE);
            }
        }
        if (_isTime) {
            input = input.replace(_inputTime, STRING_SPACE);
        }
        if (_isDescription) {
            input = replaceDescription(input);
        }
        return input;
    }

    /**
     * 
     * @param input
     *            is a <code>String</code> of details to be parsed
     * @return a <code>String</code> of details without the unnecessary
     *         prepositions at the end
     */
    private static String removePrepositions(String input) {
        input = input.replace("\\s+", "\\s");
        String[] part = input.trim().split(STRING_SPACE);
        String[] prepoList = { "at", "on", "from" };

        do {
            int lastIndex = part.length - 1;
            for (int i = 0; i < prepoList.length; i++) {
                if (part[lastIndex].equals(prepoList[i])) {
                    input = input.substring(0,
                            input.length() - prepoList[i].length()).trim();
                }
            }
            part = input.split(STRING_SPACE);

        } while (part[part.length - 1].equals(STRING_AT)
                || part[part.length - 1].equals(STRING_ON)
                || part[part.length - 1].equals(STRING_FROM));

        return input;
    }

    /**
     * 
     * @param input
     *            is a <code>String</code> of details to be parsed
     * @return a <code>String</code> of details without the description
     */
    private static String replaceDescription(String input) {
        if (_isDescription) {
            String descriptionTemp = STRING_DOUBLE_DASH + _description;
            input = input.replace(descriptionTemp, STRING_SPACE).trim();
        }
        return input;
    }

    /**
     * Title is parsed from the details.
     * 
     * @param input
     *            is a <code>String</code> of details to be parsed
     */
    private static void identifyTitle(String input) {
        input = replaceDateTimeDescription(input);

        if (_isVenue) {
            String venueTemp = STRING_ADD + _venue;
            input = input.replace(venueTemp, STRING_SPACE);
        }
        input = input.trim();
        if (input.isEmpty()) {
            _title = input;
        } else {
            _title = removePrepositions(input).trim();
        }
        _title = _title.replaceAll("\\s+", STRING_SPACE);
    }

    /**
     * Description is parsed from the details.
     * 
     * @param input
     *            is a <code>String</code> of details to be parsed
     */
    private static void identifyDescription(String input) {
        String[] part = input.split(STRING_DOUBLE_DASH);
        if (part.length == 0) {
            _description = null;
        } else {
        _description = part[1].trim();
        }
        _isDescription = true;
    }

    /**
     * Venue is parsed from the details.
     * 
     * @param input
     *            is a <code>String</code> of details to be parsed
     */
    private static void identifyVenue(String input) {
        input = replaceDateTimeDescription(input);
        int index = input.indexOf(STRING_ADD) + 1;
        _isVenue = true;
        input = input.substring(index).trim();
        _venue = removePrepositions(input).trim();
    }

    /**
     * Date is parsed from the details using a modified natty parser.
     * 
     * @param input
     *            is a <code>String</code> of details to be parsed
     */
    private static void identifyDate(String input) {
        Parser parser = new Parser();
        String[] temp = input.split(STRING_SPACE);
        String newDate;
        String[] dateFragment;

        for (int i = 0; i < temp.length; i++) {
            String messageFragment = temp[i];
            String originalFragment = temp[i];
            // dd/MM/YY or dd/MM/YYYY or dd/MM
            if (messageFragment.matches(DATE_FORMAT_DDMMYYYY_REGEX)
                    || messageFragment.matches(DATE_FORMAT_DDMMYY_REGEX)
                    || messageFragment.matches(DATE_FORMAT_DDMM_REGEX)) {

                // dd/MM
                if (messageFragment.length() <= 5
                        && messageFragment.length() > 2) {
                    messageFragment = messageFragment + STRING_DASH
                            + STRING_YEAR;
                }
                dateFragment = messageFragment.split(DATE_FORMAT_DIVIDER_REGEX);
                if (dateFragment[2].length() == 2) {
                    dateFragment[2] = STRING_YEAR_FRAG + dateFragment[2];
                }
                newDate = dateFragment[2] + STRING_DASH + dateFragment[1]
                        + STRING_DASH + dateFragment[0];

                input = input.replace(originalFragment, newDate);
                _inputDateThatCantParse = originalFragment;
            }

            if (input.contains(STRING_TMR)) {
                _inputDateThatCantParse = STRING_TMR;
            }
            if (input.contains(STRING_TODAY)) {
                _inputDateThatCantParse = STRING_TODAY;
            }

            if (messageFragment.matches(DISABLE_NUMBER_REGEX)
                    || messageFragment.matches(DISABLE_PARSING_REGEX)
                    || messageFragment.matches(DISABLE_FAKE_TIME_REGEX)
                    || messageFragment.matches(DISABLE_FAKE_DIGIT_REGEX)) {
                _inputThatCantParse.add(originalFragment);
                String[] inputPart = input.split(STRING_SPACE);

                input = STRING_EMPTY;
                for (int j = 0; j < inputPart.length; j++) {
                    if (inputPart[j].equals(originalFragment)) {
                        inputPart[j] = STRING_EMPTY;
                    }
                    input += inputPart[j] + STRING_SPACE;
                }
            }
        }

        List<DateGroup> dateGroup = parser.parse(input);
        if (dateGroup.size() > 0) {
            Date date = dateGroup.get(0).getDates().get(0);
            _inputDate = dateGroup.get(0).getText();

            SimpleDateFormat dateFormat = new SimpleDateFormat(
                    DATE_FORMAT_STANDARD);
            String output = dateFormat.format(date);

            _date = output;
        } else {
            _date = null;
        }
    }

    /**
     * Time is parsed from the details using a modified natty parser.
     * 
     * @param input
     *            is a <code>String</code> of details to be parsed
     */
    private static void identifyTime(String input) {
        Parser parser = new Parser();

        if (_inputDateThatCantParse != null) {
            input = input.replace(_inputDateThatCantParse, STRING_SPACE);
        }

        String[] inputPart = input.split(STRING_SPACE);
        input = STRING_EMPTY;
        for (int i = 0; i < inputPart.length; i++) {
            for (int j = 0; j < _inputThatCantParse.size(); j++) {
                if (inputPart[i].equals(_inputThatCantParse.get(j))) {
                    inputPart[i] = STRING_EMPTY;
                }
            }
            input += inputPart[i] + STRING_SPACE;
        }

        if (input.contains(STRING_TONIGHT)) {
            input = input.replace(STRING_TONIGHT, STRING_TONIGHT_TIME);
        }

        List<DateGroup> dateGroup = parser.parse(input);
        if (dateGroup.size() > 0) {

            Date timeStart = null;
            Date timeEnd = null;
            String output;

            if (dateGroup.get(0).getDates().size() == 1) {
                timeStart = dateGroup.get(0).getDates().get(0);
            } else {
                timeStart = dateGroup.get(0).getDates().get(0);
                timeEnd = dateGroup.get(0).getDates().get(1);
            }

            _inputTime = dateGroup.get(0).getText();
            SimpleDateFormat timeFormat = new SimpleDateFormat("HHmm");
            String outputStart = timeFormat.format(timeStart);

            if (timeEnd != null) {
                String outputEnd = timeFormat.format(timeEnd);
                output = outputStart + STRING_SPACE + STRING_DASH
                        + STRING_SPACE + outputEnd;
            } else {
                output = outputStart;
            }

            _time = output;
        } else {
            _time = null;
        }
    }

    /**
     * Set the time to <code>null</code> if the current time is parsed due to
     * the natty parser.
     * 
     * @param input
     *            is a <code>String</code> of time in HHmm format
     */
    private static void checkWithCurrentTime(String input) {
        Parser parser = new Parser();

        List<DateGroup> dateGroup = parser.parse(STRING_NOW);
        Date date = dateGroup.get(0).getDates().get(0);
        SimpleDateFormat timeFormat = new SimpleDateFormat(TIME_FORMAT);
        String output = timeFormat.format(date);

        if (input.equals(output)) {
            _time = null;
        } else {
            dateGroup = parser.parse("1 minute later");
            Date newDate = dateGroup.get(0).getDates().get(0);
            String newOutput = timeFormat.format(newDate);
            if (input.equals(newOutput)) {
                _time = null;
            }
        }
    }

    /**
     * @return <code>String</code> of current time in HHmm format.
     */
    public static String getCurrentTime() {
        Parser parser = new Parser();

        List<DateGroup> dateGroup = parser.parse(STRING_NOW);
        Date date = dateGroup.get(0).getDates().get(0);
        SimpleDateFormat timeFormat = new SimpleDateFormat(TIME_FORMAT);
        String output = timeFormat.format(date);

        return output;
    }

    /**
     * @param input
     *            a <code>String</code> that contains a command and details.
     * @return <code>String</code> of details without the command or the
     *         original <code>String</code> input if there are no spaces.
     */
    @Override
    public String getString(String input) {
        int index = input.indexOf(STRING_SPACE);
        input = input.substring(index).trim();
        return input;
    }

    /**
     * @param input
     *            a <code>String</code> that contains a command and details.
     * @return <code>String</code> of the command without the details or a
     *         <code>String</code> of the first word of the input.
     */
    @Override
    public String getCommand(String input) {
        if (input == null || input.isEmpty()) {
            return STRING_EMPTY;
        }
        String[] part = input.split(STRING_SPACE);
        return part[0].toUpperCase();
    }

    /**
     * Creates an <code>ArrayList</code> of <code>Integer</code> from the input
     * <code>String</code>. When there is more than one index, the indices are
     * identified by a comma, a space, a dash or "to".
     * 
     * @param input
     *            a <code>String</code> containing the indices or a range of
     *            indices.
     * @return an <code>ArrayList</code> of the indices.
     */
    @Override
    public ArrayList<Integer> getIndexList(String input) {
        input = input.trim();
        ArrayList<Integer> list = new ArrayList<Integer>();
        String[] num;

        if (input.contains(STRING_DASH) || input.contains(STRING_TO)) {
            input = input.replaceAll("\\s+", STRING_EMPTY);
            if (input.contains(STRING_DASH)) {
                num = input.split(STRING_DASH);
            } else {
                num = input.split(STRING_TO);
            }
            int firstIndex = Integer.valueOf(num[0]);
            int lastIndex = Integer.valueOf(num[1]);
            for (int i = firstIndex; i <= lastIndex; i++) {
                list.add(i);
            }
        } else {
            if (input.contains(STRING_COMMA)) {
                num = input.split(STRING_COMMA);
            } else {
                num = input.split("\\s+");
            }
            for (int i = 0; i < num.length; i++) {
                list.add(Integer.valueOf(num[i].trim()));
            }

        }
        return list;
    }

    /**
     * Takes in a String and parse the date.
     * 
     * @param input
     *            a <code>String</code> containing a date.
     * @return a <code>String</code> of the date in YYYY-MM-dd format or
     *         <code>null</code> when the input cannot be parsed.
     */
    @Override
    public String getDate(String input) {
        String date;
        if (input != null) {
            identifyDate(input);
            date = _date;
            _date = null;
        } else {
            date = null;
        }
        return date;
    }

    /**
     * Takes in a String of a specific date format and parse the date into
     * another format.
     * 
     * @param input
     *            a <code>String</code> containing a date in YYYY-MM-dd format.
     * @return a <code>String</code> of the date in EEEE, dd MMMM YYYY format or
     *         <code>null</code> when the input cannot be parsed.
     */
    @Override
    public String getFormattedDate(String input) {
        String formattedDate;
        if (input != null) {
            Parser parser = new Parser();
            List<DateGroup> dateGroup = parser.parse(input);
            if (dateGroup.size() > 0) {
                Date date = dateGroup.get(0).getDates().get(0);
                SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(
                    DATE_FORMAT_SPECIAL);
                String output = DATE_FORMAT.format(date);

                formattedDate = output;
            } else {
                formattedDate = null;
            }
        } else {
            formattedDate = null;
        }
        return formattedDate;
    }

    /**
     * Takes in a String and parse the time.
     * 
     * @param input
     *            a <code>String</code> containing a time.
     * @return a <code>String</code> of the time in HHmm, 24 hours format or
     *         <code>null</code> when the input cannot be parsed.
     */
    @Override
    public String getTime(String input) {
        String time;
        if (input != null) {
            identifyTime(input);
            time = _time;
            _time = null;
        } else {
            time = null;
        }
        return time;
    }
}

	// End of segment: U:\workspace\BakaTxt\src\bakatxt\core\BakaParser.java





	/**
	 * origin: U:\workspace\BakaTxt\src\bakatxt\core\BakaParserInterface.java
	 */

package bakatxt.core;

import java.util.ArrayList;

public interface BakaParserInterface {
    public String getCommand(String input);

    public Task add(String input);

    public String getString(String input);

    public ArrayList<Integer> getIndexList(String input);

    public String getDate(String input);

    public String getFormattedDate(String input);

    public String getTime(String input);

}

	// End of segment: U:\workspace\BakaTxt\src\bakatxt\core\BakaParserInterface.java





	/**
	 * origin: U:\workspace\BakaTxt\src\bakatxt\core\ReverseAction.java
	 */

package bakatxt.core;

import java.util.Stack;

public class ReverseAction implements ReverseActionInterface {
    private static Stack<UserAction> undoStack;
    private static Stack<UserAction> redoStack;

    public ReverseAction() {
        undoStack = new Stack<UserAction>();
        redoStack = new Stack<UserAction>();
    }

    /**
     * Stores the executed command and task.
     * 
     * @param input
     *            a UserAction that contains the execution methods
     * @return <code>true</code> if a command is executed
     */
    @Override
    public boolean execute(UserAction input) {
        boolean isSuccessful = input.execute(); // execute command
        if (isSuccessful) {
            undoStack.push(input);
        }
        return isSuccessful;
    }

    /**
     * Undo the previous action.
     * 
     * @return <code>true</code> if undo is executed
     */
    @Override
    public boolean undo() {
        boolean isSuccessful = false;
        if (!undoStack.isEmpty()) {
            UserAction action = undoStack.pop();
            isSuccessful = action.undo();
            if (!isSuccessful) {
                undoStack.push(action);
            } else {
                redoStack.push(action);
            }
        }
        return isSuccessful;
    }

    /**
     * Redo the previous undo action.
     * 
     * @return <code>true</code> if redo is executed
     */
    @Override
    public boolean redo() {
        boolean isSuccessful = false;
        if (!redoStack.isEmpty()) {
            UserAction action = redoStack.pop();
            isSuccessful = action.execute();
            if (!isSuccessful) {
                redoStack.push(action);
            } else {
                undoStack.push(action);
            }
        }
        return isSuccessful;
    }

}

	// End of segment: U:\workspace\BakaTxt\src\bakatxt\core\ReverseAction.java





	/**
	 * origin: U:\workspace\BakaTxt\src\bakatxt\core\ReverseActionInterface.java
	 */

package bakatxt.core;

public interface ReverseActionInterface {

    public boolean execute(UserAction input);

    public boolean undo();

    public boolean redo();
}

	// End of segment: U:\workspace\BakaTxt\src\bakatxt\core\ReverseActionInterface.java





	/**
	 * origin: U:\workspace\BakaTxt\src\bakatxt\test\BakaParserAutomatedTest.java
	 */

package bakatxt.test;

import static org.junit.Assert.assertEquals;

import java.util.LinkedList;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import bakatxt.core.BakaParser;
import bakatxt.core.Database;
import bakatxt.core.Task;

public class BakaParserAutomatedTest {

    private static BakaBot _bot;
    private static Database _database;
    private static BakaParser _parser;

    @BeforeClass
    public static void oneTimeSetUp() throws Exception {
        _bot = new BakaBot();
        BakaBot.botOneTimeSetUp();
        _parser = new BakaParser();
        _database = Database.getInstance();
    }

    @AfterClass
    public static void oneTimeTearDown() throws Exception {
        BakaBot.botOneTimeTearDown();
    }

    @Before
    public void setUp() throws Exception {
    }

    @After
    public void tearDown() throws Exception {
        BakaBot.botTearDown();
    }

    @Test
    public void testAddInputCase() {
        String input = BakaBot.ADD + "lUNCH tomorrow 2pm";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_VERY_LONG);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("lUNCH");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddNumbersTitle() {
        String input = BakaBot.ADD + "0123456789";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("0123456789");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddLongTitle() {
        String input = BakaBot.ADD
                + " this is a super super long title for testing purposes idk where to stoppppp";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database
                .getTaskWithTitle("this is a super super long title for testing purposes idk where to stoppppp");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddTitleFormat1() {
        String input = BakaBot.ADD + "2103tzx";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("2103tzx");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddTitleFormat2() {
        String input = BakaBot.ADD + "8z";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("8z");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddTitleFormat3() {
        String input = BakaBot.ADD + "edit1";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("edit1");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddVenue() {
        String input = BakaBot.ADD + "do cs2101 assignment @ computing at nus";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("do cs2101 assignment");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddSpecialVenue() {
        String input = BakaBot.ADD + "discuss 2103t with members @com1";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("discuss 2103t with members");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddDescription() {
        String input = BakaBot.ADD
                + "do research -- about inefficient solid waste management";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("do research");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateTmr() {
        String input = BakaBot.ADD + "cut hair tomorrow";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("cut hair");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateNoon() {
        String input = BakaBot.ADD + "brunch at noon tomorrow";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("brunch");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateNextWeek() {
        String input = BakaBot.ADD + "go sentosa next week";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("go sentosa");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateNextFriday() {
        String input = BakaBot.ADD + "presentation next friday";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("presentation");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateNextMonth() {
        String input = BakaBot.ADD + "go cafe next month";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("go cafe");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateFormat1() {
        String input = BakaBot.ADD + "teabreak 20/12/2014";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("teabreak");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateFormat2() {
        String input = BakaBot.ADD + "buy trackpad 21/11";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("buy trackpad");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateFormat3() {
        String input = BakaBot.ADD + "see doctor on 1/12/14";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("see doctor");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateFormat4() {
        String input = BakaBot.ADD + "go shopping on 21-12";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("go shopping");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateFormat5() {
        String input = BakaBot.ADD + "go eat supper on 4-12-2014";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("go eat supper");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateFormat6() {
        String input = BakaBot.ADD + "meeting friends 15-1-15";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("meeting friends");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeFormat1() {
        String input = BakaBot.ADD + "go library 20/1/15 2pm";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("go library");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeFormat2() {
        String input = BakaBot.ADD + "class 6/2/15 9am";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("class");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeFormat3() {
        String input = BakaBot.ADD + "work on 27/12 1200hours";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("work");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeFormat4() {
        String input = BakaBot.ADD + "swimming with sis 28/12 13:00";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("swimming with sis");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeFormat5() {
        String input = BakaBot.ADD + "submit homework 18/11 1200h";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("submit homework");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeDurationFormat1() {
        String input = BakaBot.ADD
                + "google hangouts next week 9pm to 11pm @home";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("google hangouts");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeDurationFormat2() {
        String input = BakaBot.ADD
                + "lunch buffet tomorrow 1300h - 1500h @ town";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("lunch buffet");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeDurationFormat3() {
        String input = BakaBot.ADD + "studyyy next week @ school 13:00 - 6pm";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("studyyy");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateVenue() {
        String input = BakaBot.ADD
                + "lunchhh 2/3/15 @ school or somewhere else";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("lunchhh");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateVenuePrepo() {
        String input = BakaBot.ADD + "eat gyoza on 1/1/15 at @jurong";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("eat gyoza");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddVenueDate() {
        String input = BakaBot.ADD + "english class @ engine e3 21/11";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("english class");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    public void testAddSpecialVenueDate() {
        String input = BakaBot.ADD + "buy bread @ buona vista 15/12";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("buy bread");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddVenueDatePrepo() {
        String input = BakaBot.ADD + "lab at @ engine e3 on at 16/11";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("lab");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateTimeVenue() {
        String input = BakaBot.ADD + "hola 3/8/15 3pm @ school";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("hola");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateTimeVenuePrepo() {
        String input = BakaBot.ADD + "booooo on 6/3/15 at 3pm at @ school";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("booooo");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddVenueDateTime() {
        String input = BakaBot.ADD + "lunch date @school or smth 5/8/2015 12pm";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("lunch date");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddVenueDateTimePrepo() {
        String input = BakaBot.ADD
                + "take a walk at on @nearby home or smth on 13/5/2015 at on 5pm";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("take a walk");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeDateVenue() {
        String input = BakaBot.ADD + "rest 3pm 8-2-15 @ school wooo";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("rest");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeDateVenuePrepo() {
        String input = BakaBot.ADD + "go out at on 10am on 8-12-14 @ town wooo";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("go out");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void testAddVenueTimeDatePrepo() {
        String input = BakaBot.ADD + "buy book @somewhere la 12pm 1-12";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("buy book");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }
}

	// End of segment: U:\workspace\BakaTxt\src\bakatxt\test\BakaParserAutomatedTest.java





	/**
	 * origin: U:\workspace\BakaTxt\src\bakatxt\test\BakaParserTest.java
	 */

package bakatxt.test;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;

import org.junit.Before;
import org.junit.Test;

import bakatxt.core.BakaParser;
import bakatxt.core.Task;

public class BakaParserTest {
    private static BakaParser _parser;

    @Before
    public void setUp() throws Exception {
        _parser = new BakaParser();
    }

    @Test
    public void testInputCase() {
        String input = "adD HELLO testinG @ scHOOl";
        Task output = _parser.add(input);
        Task expected = new Task("HELLO testinG");
        expected.setVenue("scHOOl");
        assertEquals(expected, output);
    }

    @Test
    public void testAddWordTitle() {
        String input = "add hello";
        Task output = _parser.add(input);
        Task expected = new Task("hello");
        assertEquals(expected, output);
    }

    @Test
    public void testAddLongWordTitle() {
        String input = "add lunch with project members";
        Task output = _parser.add(input);
        Task expected = new Task("lunch with project members");
        assertEquals(expected, output);
    }

    @Test
    public void testAddLongNumberTitle() {
        String input = "add 012345";
        Task output = _parser.add(input);
        Task expected = new Task("012345");
        assertEquals(expected, output);
    }

    @Test
    public void testAddTitleFormat1() {
        String input = "add 2103tzx";
        Task output = _parser.add(input);
        Task expected = new Task("2103tzx");
        assertEquals(expected, output);
    }

    @Test
    public void testAddTitleFormat2() {
        String input = "add 8z";
        Task output = _parser.add(input);
        Task expected = new Task("8z");
        assertEquals(expected, output);
    }

    @Test
    public void testAddTitleFormat3() {
        String input = "add edit1";
        Task output = _parser.add(input);
        Task expected = new Task("edit1");
        assertEquals(expected, output);
    }

    @Test
    public void testAddTitleFormat4() {
        String input = "add CS2101 OP2 Conference @Computing tomorrow";
        Task output = _parser.add(input);
        Task expected = new Task("CS2101 OP2 Conference");
        expected.setDate(_parser.getDate("tomorrow"));
        expected.setVenue("Computing");
        assertEquals(expected, output);
    }

    @Test
    public void testAddVenue() {
        String input = "add discuss 2103t with members @school";
        Task output = _parser.add(input);
        Task expected = new Task("discuss 2103t with members");
        expected.setVenue("school");
        assertEquals(expected, output);
    }

    @Test
    public void testAddLongVenue() {
        String input = "add do cs2101 assignment @ seletar hill at yck";
        Task output = _parser.add(input);
        Task expected = new Task("do cs2101 assignment");
        expected.setVenue("seletar hill at yck");
        assertEquals(expected, output);
    }

    @Test
    public void testAddSpecialVenue() {
        String input = "add discuss 2103t with members @edit1";
        Task output = _parser.add(input);
        Task expected = new Task("discuss 2103t with members");
        expected.setVenue("edit1");
        assertEquals(expected, output);
    }

    @Test
    public void testAddDescription() {
        String input = "add lunch -- woohoo 14/12/14 2pm";
        Task output = _parser.add(input);
        Task expected = new Task("lunch");
        expected.setDescription("woohoo 14/12/14 2pm");
        assertEquals(expected, output);
    }

    @Test
    public void testAddLongDescription() {
        String input = "add do research --about inefficient solid waste management";
        Task output = _parser.add(input);
        Task expected = new Task("do research");
        expected.setDescription("about inefficient solid waste management");
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateToday() {
        String input = "add do nothing today 23:59";
        Task output = _parser.add(input);
        Task expected = new Task("do nothing");
        expected.setDate(_parser.getDate("today"));
        expected.setTime("2359");
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateTmr() {
        String input = "add cut hair tomorrow";
        Task output = _parser.add(input);
        Task expected = new Task("cut hair");
        expected.setDate(_parser.getDate("tomorrow"));
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateTonight() {
        String input = "add dinner tonight";
        Task output = _parser.add(input);
        Task expected = new Task("dinner");
        expected.setDate(_parser.getDate("tonight"));
        expected.setTime("1900");
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateNoon() {
        String input = "add lunch at noon 3100-12-31";
        Task output = _parser.add(input);
        Task expected = new Task("lunch");
        expected.setDate("3100-12-31");
        expected.setTime("1200");
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateFormat1() {
        String input = "add dinner 20/12/2014";
        Task output = _parser.add(input);
        Task expected = new Task("dinner");
        expected.setDate("2014-12-20");
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateFormat2() {
        String input = "add buy trackpad 29/11";
        Task output = _parser.add(input);
        Task expected = new Task("buy trackpad");
        expected.setDate("2014-11-29");
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateFormat3() {
        String input = "add see doctor 1/12/14";
        Task output = _parser.add(input);
        Task expected = new Task("see doctor");
        expected.setDate("2014-12-01");
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateFormat4() {
        String input = "add lunch 21-12";
        Task output = _parser.add(input);
        Task expected = new Task("lunch");
        expected.setDate("2014-12-21");
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateFormat5() {
        String input = "add dinner 4-1-2015";
        Task output = _parser.add(input);
        Task expected = new Task("dinner");
        expected.setDate("2015-01-04");
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateFormat6() {
        String input = "add meeting friends 15-4-15";
        Task output = _parser.add(input);
        Task expected = new Task("meeting friends");
        expected.setDate("2015-04-15");
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateFormat7() {
        String input = "add hello next week";
        Task output = _parser.add(input);
        Task expected = new Task("hello");
        expected.setDate(_parser.getDate("next week"));
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateFormat8() {
        String input = "add hello next month";
        Task output = _parser.add(input);
        Task expected = new Task("hello");
        expected.setDate(_parser.getDate("next month"));
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateFormat9() {
        String input = "add hello thursday";
        Task output = _parser.add(input);
        Task expected = new Task("hello");
        expected.setDate(_parser.getDate("thursday"));
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeFormat1() {
        String input = "add go shopping 7/12 2pm";
        Task output = _parser.add(input);
        Task expected = new Task("go shopping");
        expected.setDate("2014-12-07");
        expected.setTime("1400");
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeFormat2() {
        String input = "add class 6/12 9am";
        Task output = _parser.add(input);
        Task expected = new Task("class");
        expected.setDate("2014-12-06");
        expected.setTime("0900");
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeFormat3() {
        String input = "add class 6/12 1200hours";
        Task output = _parser.add(input);
        Task expected = new Task("class");
        expected.setDate("2014-12-06");
        expected.setTime("1200");
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeFormat4() {
        String input = "add class 6/12 12:00";
        Task output = _parser.add(input);
        Task expected = new Task("class");
        expected.setDate("2014-12-06");
        expected.setTime("1200");
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeFormat5() {
        String input = "add class 6/12 1200h";
        Task output = _parser.add(input);
        Task expected = new Task("class");
        expected.setDate("2014-12-06");
        expected.setTime("1200");
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeDurationFormat1() {
        String input = "add lunch buffet tomorrow from 1pm to 3pm @town";
        Task output = _parser.add(input);
        Task expected = new Task("lunch buffet");
        expected.setDate(_parser.getDate("tomorrow"));
        expected.setTime("1300");
        expected.setEndTime("1500");
        expected.setVenue("town");
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeDurationFormat2() {
        String input = "add google hangouts from next week 9pm to 11pm @ home";
        Task output = _parser.add(input);
        Task expected = new Task("google hangouts");
        expected.setDate(_parser.getDate("next week"));
        expected.setTime("2100");
        expected.setEndTime("2300");
        expected.setVenue("home");
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeDurationFormat3() {
        String input = "add google hangouts tomorrow 1pm to 3pm @home";
        Task output = _parser.add(input);
        Task expected = new Task("google hangouts");
        expected.setDate(_parser.getDate("tomorrow"));
        expected.setTime("1300");
        expected.setEndTime("1500");
        expected.setVenue("home");
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeDurationFormat4() {
        String input = "add google hangouts tomorrow @ home 1pm to 3pm";
        Task output = _parser.add(input);
        Task expected = new Task("google hangouts");
        expected.setDate(_parser.getDate("tomorrow"));
        expected.setTime("1300");
        expected.setEndTime("1500");
        expected.setVenue("home");
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeDurationFormat5() {
        String input = "add google hangouts @ home tomorrow 1300h to 15:00";
        Task output = _parser.add(input);
        Task expected = new Task("google hangouts");
        expected.setDate(_parser.getDate("tomorrow"));
        expected.setTime("1300");
        expected.setEndTime("1500");
        expected.setVenue("home");
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeDurationFormat6() {
        String input = "add google hangouts 13:00 - 16:00 @home";
        Task output = _parser.add(input);
        Task expected = new Task("google hangouts");
        expected.setDate(_parser.getDate("today"));
        expected.setTime("1300");
        expected.setEndTime("1600");
        expected.setVenue("home");
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateVenue() {
        String input = "add lunch 2/12 @ school or somewhere else";
        Task output = _parser.add(input);
        Task expected = new Task("lunch");
        expected.setDate("2014-12-02");
        expected.setVenue("school or somewhere else");
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateVenuePrepo() {
        String input = "add lunch on 2/12 at @jurong";
        Task output = _parser.add(input);
        Task expected = new Task("lunch");
        expected.setDate("2014-12-02");
        expected.setVenue("jurong");
        assertEquals(expected, output);
    }

    @Test
    public void testAddVenueDate() {
        String input = "add class @ engine e3 1/5/15";
        Task output = _parser.add(input);
        Task expected = new Task("class");
        expected.setDate("2015-05-01");
        expected.setVenue("engine e3");
        assertEquals(expected, output);
    }

    @Test
    public void testAddSpecialVenueDate() {
        String input = "add lunch @ buona vista 15/2/15";
        Task output = _parser.add(input);
        Task expected = new Task("lunch");
        expected.setDate("2015-02-15");
        expected.setVenue("buona vista");
        assertEquals(expected, output);
    }

    @Test
    public void testAddVenueDatePrepo() {
        String input = "add class at @ engine e3 on at 15/2/15";
        Task output = _parser.add(input);
        Task expected = new Task("class");
        expected.setDate("2015-02-15");
        expected.setVenue("engine e3");
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateTimeVenue() {
        String input = "add lunch 3/12 3pm @ school";
        Task output = _parser.add(input);
        Task expected = new Task("lunch");
        expected.setDate("2014-12-03");
        expected.setTime("1500");
        expected.setVenue("school");
        assertEquals(expected, output);
    }

    @Test
    public void testAddDateTimeVenuePrepo() {
        String input = "add lunch on 3/12 at 3pm at @ school";
        Task output = _parser.add(input);
        Task expected = new Task("lunch");
        expected.setDate("2014-12-03");
        expected.setTime("1500");
        expected.setVenue("school");
        assertEquals(expected, output);
    }

    @Test
    public void testAddVenueDateTime() {
        String input = "add lunch @school or smth 3/3/2015 3pm";
        Task output = _parser.add(input);
        Task expected = new Task("lunch");
        expected.setDate("2015-03-03");
        expected.setTime("1500");
        expected.setVenue("school or smth");
        assertEquals(expected, output);
    }

    @Test
    public void testAddVenueDateTimePrepo() {
        String input = "add lunch at on @school or smth on 3/3/2015 at on 3pm";
        Task output = _parser.add(input);
        Task expected = new Task("lunch");
        expected.setDate("2015-03-03");
        expected.setTime("1500");
        expected.setVenue("school or smth");
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeDateVenue() {
        String input = "add lunch 3pm 3-3-15 @ school wooo";
        Task output = _parser.add(input);
        Task expected = new Task("lunch");
        expected.setDate("2015-03-03");
        expected.setTime("1500");
        expected.setVenue("school wooo");
        assertEquals(expected, output);
    }

    @Test
    public void testAddTimeDateVenuePrepo() {
        String input = "add lunch at on 3pm on 3-3-15 @ school wooo";
        Task output = _parser.add(input);
        Task expected = new Task("lunch");
        expected.setDate("2015-03-03");
        expected.setTime("1500");
        expected.setVenue("school wooo");
        assertEquals(expected, output);
    }

    @Test
    public void testAddVenueTimeDate() {
        String input = "add lunch @somewhere la 12pm 3-12";
        Task output = _parser.add(input);
        Task expected = new Task("lunch");
        expected.setDate("2014-12-03");
        expected.setTime("1200");
        expected.setVenue("somewhere la");
        assertEquals(expected, output);
    }

    @Test
    public void testAddVenueTimeDatePrepo() {
        String input = "add lunch at on @somewhere la on 12pm 3-12";
        Task output = _parser.add(input);
        Task expected = new Task("lunch");
        expected.setDate("2014-12-03");
        expected.setTime("1200");
        expected.setVenue("somewhere la");
        assertEquals(expected, output);
    }

    @Test
    public void testGetString() {
        String input = "add testing 123";
        String output = _parser.getString(input);
        String expected = "testing 123";
        assertEquals(expected, output);
    }

    @Test
    public void testGetCommand() {
        String input = "add testing 123";
        String output = _parser.getCommand(input);
        String expected = "ADD";
        assertEquals(expected, output);
    }

    @Test
    public void testIndexRange1() {
        String input = "3 to 10";
        ArrayList<Integer> output = _parser.getIndexList(input);
        ArrayList<Integer> expected = new ArrayList<Integer>();
        for (int i = 3; i < 11; i++) {
            expected.add(i);
        }
        assertEquals(expected, output);
    }

    @Test
    public void testIndexRange2() {
        String input = "1-20";
        ArrayList<Integer> output = _parser.getIndexList(input);
        ArrayList<Integer> expected = new ArrayList<Integer>();
        for (int i = 1; i < 21; i++) {
            expected.add(i);
        }
        assertEquals(expected, output);
    }

    @Test
    public void testIndexRange3() {
        String input = "3, 6, 10";
        ArrayList<Integer> output = _parser.getIndexList(input);
        ArrayList<Integer> expected = new ArrayList<Integer>();
        expected.add(3);
        expected.add(6);
        expected.add(10);
        assertEquals(expected, output);
    }

    @Test
    public void testIndex() {
        String input = "2";
        ArrayList<Integer> output = _parser.getIndexList(input);
        ArrayList<Integer> expected = new ArrayList<Integer>();
        expected.add(2);
        assertEquals(expected, output);
    }

    @Test
    public void testGetDate1() {
        String input = "24/5";
        String output = _parser.getDate(input);
        String expected = "2014-05-24";
        assertEquals(expected, output);
    }

    @Test
    public void testGetDate2() {
        String input = "tomorrow";
        String output = _parser.getDate(input);
        String expected = _parser.getDate("one day later");
        assertEquals(expected, output);
    }

    @Test
    public void testGetDate3() {
        String input = "tonight";
        String output = _parser.getDate(input);
        String expected = _parser.getDate("today");
        assertEquals(expected, output);
    }

    @Test
    public void testGetDate4() {
        String input = "2-5";
        String output = _parser.getDate(input);
        String expected = "2014-05-02";
        assertEquals(expected, output);
    }

    @Test
    public void testGetDate5() {
        String input = "24/5/2014";
        String output = _parser.getDate(input);
        String expected = "2014-05-24";
        assertEquals(expected, output);
    }

    @Test
    public void testGetFormatDate1() {
        String input = "2014-10-29";
        String output = _parser.getFormattedDate(input);
        String expected = "Wednesday, 29 October 2014";
        assertEquals(expected, output);
    }

    @Test
    public void testGetTime1() {
        String input = "9pm";
        String output = _parser.getTime(input);
        String expected = "2100";
        assertEquals(expected, output);
    }

    @Test
    public void testGetTime2() {
        String input = "5:15";
        String output = _parser.getTime(input);
        String expected = "0515";
        assertEquals(expected, output);
    }

    @Test
    public void testGetTime3() {
        String input = "tonight";
        String output = _parser.getTime(input);
        String expected = "1900";
        assertEquals(expected, output);
    }

    @Test
    public void testGetTime4() {
        String input = "noon";
        String output = _parser.getTime(input);
        String expected = "1200";
        assertEquals(expected, output);
    }

    @Test
    public void testGetTime5() {
        String input = "0900h";
        String output = _parser.getTime(input);
        String expected = "0900";
        assertEquals(expected, output);
    }

    @Test
    public void testGetTime6() {
        String input = "7am";
        String output = _parser.getTime(input);
        String expected = "0700";
        assertEquals(expected, output);
    }
}


	// End of segment: U:\workspace\BakaTxt\src\bakatxt\test\BakaParserTest.java





	/**
	 * origin: U:\workspace\BakaTxt\src\bakatxt\test\BakaTxtAutomatedTest.java
	 */

package bakatxt.test;

import static org.junit.Assert.assertEquals;

import java.util.LinkedList;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import bakatxt.core.BakaParser;
import bakatxt.core.Database;
import bakatxt.core.Task;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class BakaTxtAutomatedTest {

    private static BakaBot _bot;
    private static Database _database;
    private static BakaParser _parser;

    @BeforeClass
    public static void oneTimeSetUp() throws Exception {
        _bot = new BakaBot();
        BakaBot.botOneTimeSetUp();
        _parser = new BakaParser();
        _database = Database.getInstance();
    }

    @AfterClass
    public static void oneTimeTearDown() throws Exception {
        BakaBot.botOneTimeTearDown();
    }

    @Before
    public void setUp() throws Exception {
    }

    @After
    public void tearDown() throws Exception {
        BakaBot.botTearDown();
    }

    @Test
    public void test1Add() {
        String input = BakaBot.ADD
                + "Lunch tomorrow from 2pm to 3pm @mac -- with project members";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_VERY_LONG);

        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTasksWithDate(_parser.getDate("tomorrow"));
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void test2Add2() {
        String input = "Lunch and mugging date with friends day after tomorrow 12pm @NTU";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);

        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database
                .getTaskWithTitle("Lunch and mugging date with friends");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void test3Edit() {
        _bot.inputThisString(BakaBot.DISPLAY);
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        _bot.inputThisString(BakaBot.EDIT + "2");
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        // title
        _bot.inputThisString("");
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        // venue
        _bot.inputThisString("");
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        // date
        _bot.inputThisString("");
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        // start time
        _bot.inputThisString("1pm");
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        // end time
        _bot.inputThisString("6pm");
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        // description
        _bot.inputThisString("");
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);

        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database
                .getTaskWithTitle("Lunch and mugging date with friends");
        Task expectedTask = expected.get(0);
        assertEquals(expectedTask.getTime(), "1300");
        assertEquals(expectedTask.getEndTime(), "1800");
    }

    @Test
    public void test4UndoRedo() {
        _bot.inputThisString(BakaBot.SHOW);
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        _bot.inputThisString(BakaBot.CLEAR);
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        _bot.inputThisString(BakaBot.UNDO);
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        _bot.inputThisString(BakaBot.REDO);
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        _bot.inputThisString(BakaBot.UNDO);
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);

        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("Lunch");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser
                .add("Lunch tomorrow from 2pm to 3pm @mac -- with project members"));
        output.add(_parser
                .add("Lunch and mugging date with friends day after tomorrow 1pm to 6pm @NTU"));
        assertEquals(expected, output);
    }

    @Test
    public void test5Add3() {
        String input = BakaBot.ADD + "Study for EE2020 tomorrow @Com1";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);

        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("EE2020");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void test6Add4() {
        String input = "Study for CS2103T next week from 9am to 6pm @UTown";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);

        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("CS2103T");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void test7Add5() {
        String input = BakaBot.ADD
 + "Study EE2021 on 1/12 9am @Home";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_SHORT);

        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("EE2021");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add(input));
        assertEquals(expected, output);
    }

    @Test
    public void test8Display() {
        _bot.inputThisString(BakaBot.DISPLAY + "today");
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        _bot.inputThisString(BakaBot.SHOW + "tomorrow");
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        _bot.inputThisString(BakaBot.VIEW + "week");
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        _bot.inputThisString(BakaBot.DISPLAY + "next week");
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        _bot.inputThisString(BakaBot.DISPLAY);
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);

    }

    @Test
    public void test9Delete() {
        _bot.inputThisString(BakaBot.DELETE + "1");
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
    }

    @Test
    public void test9Search() {
        _bot.inputThisString(BakaBot.SEARCH + "study");
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("study");
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add("Study for EE2020 tomorrow @Com1"));
        output.add(_parser
                .add("Study for CS2103T next week from 9am to 6pm @UTown"));
        output.add(_parser.add("Study EE2021 on 1/12 9am @Home"));
        assertEquals(expected, output);
    }
    
    @Test
    public void testt1Edit2() {
        _bot.inputThisString(BakaBot.EDIT + "2 @Com 1 -- Print notes");
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("CS2103T");
        Task expectedTask = expected.get(0);
        assertEquals(expectedTask.getVenue(), "Com 1");
        assertEquals(expectedTask.getDescription(), "Print notes");
        
    }

    @Test
    public void testt2Delete2() {
        _bot.inputThisString(BakaBot.REMOVE + "1");
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
    }

    @Test
    public void testt3Add6() {
        _bot.inputThisString(BakaBot.DISPLAY);
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        String input = BakaBot.ADD + "Breakfast today 6am @home";
        _bot.inputThisString(input);
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);

        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getTaskWithTitle("Breakfast");
        Task expectedTask = expected.get(0);
        assertEquals(expectedTask.getDescription(), "Overdue since: ["
                + _parser.getDate("today") + "]");

    }

    @Test
    public void testt4Delete3() {
        _bot.inputThisString(BakaBot.DISPLAY);
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        _bot.inputThisString(BakaBot.DELETE + "1 to 2");
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        
        LinkedList<Task> expected = new LinkedList<Task>();
        expected = _database.getAllTasks();
        LinkedList<Task> output = new LinkedList<Task>();
        output.add(_parser.add("Lunch and mugging date with friends day after tomorrow 1pm to 6pm @NTU"));
        output.add(_parser.add("Study EE2021 on 1/12 9am @Home"));
        assertEquals(expected, output);

    }
    
    @Test 
    public void testt5Done() {
        _bot.inputThisString(BakaBot.DONE + "1");
        BakaBot.waitAWhile(BakaBot.WAIT_LONG);
        
        Task expected = new Task();
        _database.updateDoneView(true);
        expected = _database.getAllTasks().get(1);
        Task output = new Task();
        output = _parser.add("Lunch and mugging date with friends day after tomorrow 1pm to 6pm @NTU");
        output.setDone(true);        
        assertEquals(expected, output);
    }
}

	// End of segment: U:\workspace\BakaTxt\src\bakatxt\test\BakaTxtAutomatedTest.java





